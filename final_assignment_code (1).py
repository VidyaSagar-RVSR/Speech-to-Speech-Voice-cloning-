# -*- coding: utf-8 -*-
"""Final Assignment code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NmPrtyKuyWwh6Mne-NjpBIwt17Qrw-pz
"""

#Importing dependencies
!apt-get install portaudio19-dev
!pip install Pyaudio
!pip install SpeechRecognition
#install transformers library
!pip install transformers -U -q
# install sentencepiece library
!pip install sentencepiece
!pip install pydub
!pip install gtts
!pip install googletrans==4.0.0-rc1
!pip install pygame

#After running above cell(installing all dependcy), click "restart runtime" and then execute the following code

#Importing required Libraries
import torch
import librosa
import numpy as np
import soundfile as sf
from scipy.io import wavfile
from IPython.display import Audio
from transformers import Wav2Vec2ForCTC, Wav2Vec2Tokenizer

import torch
import librosa
import numpy as np
from transformers import Wav2Vec2ForCTC, Wav2Vec2Tokenizer
from pydub import AudioSegment
import speech_recognition as sr
from gtts import gTTS
from googletrans import Translator
from io import BytesIO
from IPython.display import Audio, display
import tempfile
import os

from google.colab import drive

# Mount Google Drive
drive.mount('/content/gdrive')

# Specify the path to your MP3 file in Google Drive
mp3_file_path = '/content/drive/MyDrive/Speech to text/Use_Focal_Skills-[AudioTrimmer.com].mp3'

"""##Speech to text Conversion

The code loads a pre-trained Wav2Vec2 model for speech recognition, converts an MP3 file to WAV format, and then uses the Google Speech Recognition API to transcribe the speech in the WAV file to text
"""

import torch
import librosa
import numpy as np
from transformers import Wav2Vec2ForCTC, Wav2Vec2Tokenizer
from pydub import AudioSegment
import speech_recognition as sr

# Convert MP3 to WAV
mp3_file_path = '/content/gdrive/MyDrive/Speech to text/Use_Focal_Skills-[AudioTrimmer.com].mp3'
audio = AudioSegment.from_mp3(mp3_file_path)

# Specify the path for the WAV file
wav_file_path = '/content/output.wav'
audio.export(wav_file_path, format="wav")
print(f"Conversion complete. WAV file saved at: {wav_file_path}")

# Perform speech recognition on the WAV file
r = sr.Recognizer()
with sr.AudioFile(wav_file_path) as source:
    # Reading the audio file as source
    audio_text = r.listen(source)

    # Recognize the speech
    try:
        text = r.recognize_google(audio_text)
        print('Converting audio transcripts into text ...')
        print(text)
    except sr.UnknownValueError:
        print("Google Speech Recognition could not understand the audio")
    except sr.RequestError as e:
        print(f"Could not request results from Google Speech Recognition API; {e}")
    except Exception as e:
        print(f"An error occurred: {e}")

text

"""##Language conversion and output audio is generated

The code uses google pretrained model gTTs, provides a convenient way to translate a given text, convert it to speech, and play the generated audio in a specified target language
"""

from gtts import gTTS
from googletrans import Translator
from IPython.display import Audio, display
from google.colab import files

def translate_and_play(text, target_language='en'):
    # Translate the text
    translator = Translator()
    translation = translator.translate(text, dest=target_language)
    translated_text = translation.text

    # Text-to-speech generation
    tts = gTTS(translated_text, lang=target_language)

    # Save converted audio as mp3 format
    audio_file_path = "/content/translated_audio.mp3"
    tts.save(audio_file_path)

    # Play the audio in Colab
    audio_data = open(audio_file_path, 'rb').read()
    display(Audio(data=audio_data, autoplay=True))

    # Provide a link to download the audio
    files.download(audio_file_path)

if __name__ == "__main__":
    # Example text to be translated and played
    input_text = text

    # Specify the target language (e.g., 'hi' for Hindi)
    target_language = 'te'

    # Translate and play the audio, then download
    translate_and_play(input_text, target_language)

